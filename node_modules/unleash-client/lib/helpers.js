"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAppliedJitter = exports.generateHashOfConfig = exports.generateInstanceId = exports.safeName = exports.resolveContextValue = exports.createFallbackFunction = void 0;
const os_1 = require("os");
const murmurHash3 = require("murmurhash3js");
function createFallbackFunction(name, context, fallback) {
    if (typeof fallback === 'function') {
        return () => fallback(name, context);
    }
    if (typeof fallback === 'boolean') {
        return () => fallback;
    }
    return () => false;
}
exports.createFallbackFunction = createFallbackFunction;
function resolveContextValue(context, field) {
    if (context[field]) {
        return context[field];
    }
    if (context.properties && context.properties[field]) {
        return context.properties[field];
    }
    return undefined;
}
exports.resolveContextValue = resolveContextValue;
function safeName(str = '') {
    return str.replace(/\//g, '_');
}
exports.safeName = safeName;
function generateInstanceId(instanceId) {
    if (instanceId) {
        return instanceId;
    }
    let info;
    try {
        info = (0, os_1.userInfo)();
    }
    catch (e) {
        // unable to read info;
    }
    const prefix = info
        ? info.username
        : `generated-${Math.round(Math.random() * 1000000)}-${process.pid}`;
    return `${prefix}-${(0, os_1.hostname)()}`;
}
exports.generateInstanceId = generateInstanceId;
function generateHashOfConfig(o) {
    const oAsString = JSON.stringify(o);
    return murmurHash3.x86.hash128(oAsString);
}
exports.generateHashOfConfig = generateHashOfConfig;
function getAppliedJitter(jitter) {
    const appliedJitter = Math.random() * jitter;
    return Math.random() < 0.5 ? -appliedJitter : appliedJitter;
}
exports.getAppliedJitter = getAppliedJitter;
//# sourceMappingURL=helpers.js.map